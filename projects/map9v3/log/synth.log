Logfile created on Пн 12 апр 2021 18:36:28 MSK
Running yosys for verilog parsing and synthesis
yosys  -s map9v3.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3760 (git sha1 40e35993, gcc 9.3.0-17ubuntu1~20.04 -fPIC -Os)


-- Executing script file `map9v3.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: map9v3.v
Parsing Verilog input from `map9v3.v' to AST representation.
Generating RTLIL representation for module `\map9v3'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \map9v3

3.1.2. Analyzing design hierarchy..
Top module:  \map9v3
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 5 switch rules as full_case in process $proc$map9v3.v:37$1 in module map9v3.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 0 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset in `\map9v3.$proc$map9v3.v:37$1'.

3.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\map9v3.$proc$map9v3.v:37$1'.
     1/14: $0\dp[8:0] [8:1]
     2/14: $0\dp[8:0] [0]
     3/14: $0\sr[7:0] [0]
     4/14: $0\sr[7:0] [2]
     5/14: $0\sr[7:0] [3]
     6/14: $0\sr[7:0] [4]
     7/14: $0\sr[7:0] [5]
     8/14: $0\sr[7:0] [6]
     9/14: $0\sr[7:0] [7]
    10/14: $0\state[2:0]
    11/14: $0\startbuf[1:0]
    12/14: $0\counter[7:0]
    13/14: $0\done[0:0]
    14/14: $0\sr[7:0] [1]

3.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\map9v3.\dp' using process `\map9v3.$proc$map9v3.v:37$1'.
  created $adff cell `$procdff$119' with positive edge clock and positive level reset.
Creating register for signal `\map9v3.\done' using process `\map9v3.$proc$map9v3.v:37$1'.
  created $adff cell `$procdff$120' with positive edge clock and positive level reset.
Creating register for signal `\map9v3.\counter' using process `\map9v3.$proc$map9v3.v:37$1'.
  created $adff cell `$procdff$121' with positive edge clock and positive level reset.
Creating register for signal `\map9v3.\sr' using process `\map9v3.$proc$map9v3.v:37$1'.
  created $adff cell `$procdff$122' with positive edge clock and positive level reset.
Creating register for signal `\map9v3.\startbuf' using process `\map9v3.$proc$map9v3.v:37$1'.
  created $adff cell `$procdff$123' with positive edge clock and positive level reset.
Creating register for signal `\map9v3.\state' using process `\map9v3.$proc$map9v3.v:37$1'.
  created $adff cell `$procdff$124' with positive edge clock and positive level reset.

3.2.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 7 empty switches in `\map9v3.$proc$map9v3.v:37$1'.
Removing empty process `map9v3.$proc$map9v3.v:37$1'.
Cleaned up 7 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.
<suppressed ~3 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..
Removed 0 unused cells and 50 unused wires.
<suppressed ~1 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module map9v3...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \map9v3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \map9v3.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

3.6.9. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register map9v3.state.

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\state' from module `\map9v3'.
  found $adff cell for state register: $procdff$124
  root of input selection tree: $0\state[2:0]
  found reset state: 3'000 (from async reset)
  found ctrl input: $eq$map9v3.v:50$3_Y
  found ctrl input: $eq$map9v3.v:56$6_Y
  found ctrl input: $eq$map9v3.v:70$13_Y
  found ctrl input: $eq$map9v3.v:75$14_Y
  found ctrl input: $eq$map9v3.v:79$15_Y
  found ctrl input: $eq$map9v3.v:80$16_Y
  found state code: 3'100
  found state code: 3'011
  found ctrl input: $eq$map9v3.v:66$12_Y
  found state code: 3'010
  found state code: 3'001
  found ctrl output: $eq$map9v3.v:50$3_Y
  found ctrl output: $eq$map9v3.v:56$6_Y
  found ctrl output: $eq$map9v3.v:70$13_Y
  found ctrl output: $eq$map9v3.v:75$14_Y
  found ctrl output: $eq$map9v3.v:79$15_Y
  ctrl inputs: { $eq$map9v3.v:80$16_Y $eq$map9v3.v:66$12_Y }
  ctrl outputs: { $eq$map9v3.v:79$15_Y $eq$map9v3.v:75$14_Y $eq$map9v3.v:70$13_Y $eq$map9v3.v:56$6_Y $eq$map9v3.v:50$3_Y $0\state[2:0] }
  transition:      3'000 2'-- ->      3'001 8'00001001
  transition:      3'100 2'0- ->      3'100 8'10000100
  transition:      3'100 2'1- ->      3'000 8'10000000
  transition:      3'010 2'-- ->      3'011 8'00100011
  transition:      3'001 2'-0 ->      3'001 8'00010001
  transition:      3'001 2'-1 ->      3'010 8'00010010
  transition:      3'011 2'-- ->      3'100 8'01000100

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\state$125' from module `\map9v3'.

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..
Removed 13 unused cells and 13 unused wires.
<suppressed ~14 debug messages>

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\state$125' from module `\map9v3'.
  Removing unused output signal $0\state[2:0] [0].
  Removing unused output signal $0\state[2:0] [1].
  Removing unused output signal $0\state[2:0] [2].
  Removing unused output signal $eq$map9v3.v:79$15_Y.

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\state$125' from module `\map9v3' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  000 -> ----1
  100 -> ---1-
  010 -> --1--
  001 -> -1---
  011 -> 1----

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\state$125' from module `map9v3':
-------------------------------------

  Information on FSM $fsm$\state$125 (\state):

  Number of input signals:    2
  Number of output signals:   4
  Number of state bits:       5

  Input signals:
    0: $eq$map9v3.v:66$12_Y
    1: $eq$map9v3.v:80$16_Y

  Output signals:
    0: $eq$map9v3.v:50$3_Y
    1: $eq$map9v3.v:56$6_Y
    2: $eq$map9v3.v:70$13_Y
    3: $eq$map9v3.v:75$14_Y

  State encoding:
    0:    5'----1  <RESET STATE>
    1:    5'---1-
    2:    5'--1--
    3:    5'-1---
    4:    5'1----

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 2'--   ->     3 4'0001
      1:     1 2'1-   ->     0 4'0000
      2:     1 2'0-   ->     1 4'0000
      3:     2 2'--   ->     4 4'0100
      4:     3 2'-1   ->     2 4'0010
      5:     3 2'-0   ->     3 4'0010
      6:     4 2'--   ->     1 4'1000

-------------------------------------

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\state$125' from module `\map9v3'.

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.
<suppressed ~4 debug messages>

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \map9v3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \map9v3.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$122 ($adff) from module map9v3 (D = $0\sr[7:0], Q = \sr).
Adding EN signal on $procdff$121 ($adff) from module map9v3 (D = $0\counter[7:0], Q = \counter).
Adding EN signal on $procdff$120 ($adff) from module map9v3 (D = $0\done[0:0], Q = \done).
Adding EN signal on $procdff$119 ($adff) from module map9v3 (D = { \sr \N [0] }, Q = \dp).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..
Removed 6 unused cells and 15 unused wires.
<suppressed ~7 debug messages>

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.
<suppressed ~3 debug messages>

3.8.9. Rerunning OPT passes. (Maybe there is more to do..)

3.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \map9v3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

3.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \map9v3.
Performed a total of 0 changes.

3.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.8.13. Executing OPT_DFF pass (perform DFF optimizations).

3.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

3.8.16. Rerunning OPT passes. (Maybe there is more to do..)

3.8.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \map9v3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

3.8.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \map9v3.
Performed a total of 0 changes.

3.8.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

3.8.20. Executing OPT_DFF pass (perform DFF optimizations).

3.8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..

3.8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

3.8.23. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 24 bits (of 32) from port A of cell map9v3.$sub$map9v3.v:51$4 ($sub).
Removed top 23 bits (of 32) from port Y of cell map9v3.$sub$map9v3.v:51$4 ($sub).
Removed top 30 bits (of 32) from port B of cell map9v3.$add$map9v3.v:51$5 ($add).
Removed top 24 bits (of 32) from port Y of cell map9v3.$add$map9v3.v:51$5 ($add).
Removed top 24 bits (of 32) from port A of cell map9v3.$add$map9v3.v:51$5 ($add).
Removed top 31 bits (of 32) from port B of cell map9v3.$sub$map9v3.v:65$11 ($sub).
Removed top 24 bits (of 32) from port Y of cell map9v3.$sub$map9v3.v:65$11 ($sub).
Removed top 1 bits (of 2) from port B of cell map9v3.$eq$map9v3.v:80$16 ($eq).
Removed cell map9v3.$procmux$36 ($mux).
Removed cell map9v3.$procmux$42 ($mux).
Removed cell map9v3.$procmux$48 ($mux).
Removed cell map9v3.$procmux$54 ($mux).
Removed cell map9v3.$procmux$60 ($mux).
Removed cell map9v3.$procmux$66 ($mux).
Removed cell map9v3.$procmux$72 ($mux).
Removed cell map9v3.$procmux$96 ($mux).
Removed top 1 bits (of 3) from port B of cell map9v3.$auto$opt_dff.cc:218:make_patterns_logic$163 ($ne).
Removed cell map9v3.$procmux$102 ($mux).
Removed cell map9v3.$procmux$105 ($mux).
Removed cell map9v3.$procmux$108 ($mux).
Removed cell map9v3.$procmux$114 ($mux).
Removed top 1 bits (of 9) from port Y of cell map9v3.$sub$map9v3.v:51$4 ($sub).
Removed top 24 bits (of 32) from wire map9v3.$add$map9v3.v:51$5_Y.
Removed top 24 bits (of 32) from wire map9v3.$sub$map9v3.v:51$4_Y.

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..
Removed 0 unused cells and 14 unused wires.
<suppressed ~1 debug messages>

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module map9v3:
  creating $macc model for $add$map9v3.v:51$5 ($add).
  creating $macc model for $sub$map9v3.v:51$4 ($sub).
  creating $macc model for $sub$map9v3.v:65$11 ($sub).
  merging $macc model for $sub$map9v3.v:51$4 into $add$map9v3.v:51$5.
  creating $alu model for $macc $sub$map9v3.v:65$11.
  creating $macc cell for $add$map9v3.v:51$5: $auto$alumacc.cc:365:replace_macc$178
  creating $alu cell for $sub$map9v3.v:65$11: $auto$alumacc.cc:485:replace_alu$179
  created 1 $alu and 1 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \map9v3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \map9v3.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

3.14.9. Rerunning OPT passes. (Maybe there is more to do..)

3.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \map9v3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

3.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \map9v3.
Performed a total of 0 changes.

3.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

3.14.13. Executing OPT_DFF pass (perform DFF optimizations).

3.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..

3.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

3.14.16. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.15.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..

3.15.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..

3.15.6. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.
<suppressed ~1 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \map9v3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \map9v3.
Performed a total of 0 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

3.19.10. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper maccmap for cells of type $macc.
  sub \N [8:1] (8 bits, unsigned)
  add 8'00000010 (8 bits, unsigned)
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=1\Y_WIDTH=8 for cells of type $alu.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $adff.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=8 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~317 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.
<suppressed ~97 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..
Removed 11 unused cells and 101 unused wires.
<suppressed ~12 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\map9v3' to `<abc-temp-dir>/input.blif'..
Extracted 108 gates and 140 wires to a netlist network with 31 inputs and 24 outputs.

3.22.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        4
ABC RESULTS:            ANDNOT cells:       20
ABC RESULTS:               MUX cells:        9
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:       10
ABC RESULTS:               NOT cells:        3
ABC RESULTS:                OR cells:        7
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:              XNOR cells:        5
ABC RESULTS:               XOR cells:       12
ABC RESULTS:        internal signals:       85
ABC RESULTS:           input signals:       31
ABC RESULTS:          output signals:       24
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.
<suppressed ~8 debug messages>

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..
Removed 0 unused cells and 101 unused wires.
<suppressed ~1 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \map9v3

3.24.2. Analyzing design hierarchy..
Top module:  \map9v3
Removed 0 unused modules.

3.25. Printing statistics.

=== map9v3 ===

   Number of wires:                 69
   Number of wire bits:            118
   Number of public wires:          10
   Number of public wire bits:      45
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                106
     $_ANDNOT_                      20
     $_AND_                          4
     $_DFFE_PP0P_                   26
     $_DFF_PP0_                      6
     $_DFF_PP1_                      1
     $_MUX_                          9
     $_NAND_                         2
     $_NOR_                          7
     $_NOT_                          3
     $_ORNOT_                        4
     $_OR_                           7
     $_XNOR_                         5
     $_XOR_                         12

3.26. Executing CHECK pass (checking for obvious problems).
Checking module map9v3...
Found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    \DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

4.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\map9v3':
  mapped 33 $_DFFSR_PNN_ cells to \DFFSR cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.
<suppressed ~33 debug messages>

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
<suppressed ~96 debug messages>
Removed a total of 32 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \map9v3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \map9v3.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

5.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..
Removed 0 unused cells and 65 unused wires.
<suppressed ~1 debug messages>

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

5.9. Rerunning OPT passes. (Maybe there is more to do..)

5.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \map9v3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \map9v3.
Performed a total of 0 changes.

5.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

5.13. Executing OPT_DFF pass (perform DFF optimizations).

5.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..

5.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

5.16. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\map9v3' to `<abc-temp-dir>/input.blif'..
Extracted 100 gates and 143 wires to a netlist network with 43 inputs and 31 outputs.

6.1.1. Executing ABC.
Running ABC command: yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/oleg/RTLtoGDS/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/home/oleg/RTLtoGDS/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        5
ABC RESULTS:           AOI21X1 cells:       15
ABC RESULTS:           AOI22X1 cells:        2
ABC RESULTS:             INVX1 cells:       29
ABC RESULTS:           NAND2X1 cells:       15
ABC RESULTS:           NAND3X1 cells:        4
ABC RESULTS:            NOR2X1 cells:       23
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           OAI21X1 cells:       24
ABC RESULTS:           OAI22X1 cells:       10
ABC RESULTS:           XNOR2X1 cells:        2
ABC RESULTS:            XOR2X1 cells:        2
ABC RESULTS:        internal signals:       69
ABC RESULTS:           input signals:       43
ABC RESULTS:          output signals:       31
Removing temp directory.

7. Executing FLATTEN pass (flatten design).

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 129 unused wires.

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port map9v3.N: Missing option -inpad.
Don't map input port map9v3.clock: Missing option -inpad.
Mapping port map9v3.counter using BUFX2.
Mapping port map9v3.done using BUFX2.
Mapping port map9v3.dp using BUFX2.
Don't map input port map9v3.reset: Missing option -inpad.
Mapping port map9v3.sr using BUFX2.
Don't map input port map9v3.start: Missing option -inpad.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \map9v3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \map9v3.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing Verilog backend.
Dumping module `\map9v3'.

12. Printing statistics.

=== map9v3 ===

   Number of wires:                146
   Number of wire bits:            203
   Number of public wires:         146
   Number of public wire bits:     203
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                191
     AND2X2                          5
     AOI21X1                        15
     AOI22X1                         2
     BUFX2                          26
     DFFSR                          33
     INVX1                          29
     NAND2X1                        15
     NAND3X1                         4
     NOR2X1                         23
     NOR3X1                          1
     OAI21X1                        24
     OAI22X1                        10
     XNOR2X1                         2
     XOR2X1                          2

End of script. Logfile hash: 9227d4abd5, CPU: user 0.69s system 0.05s, MEM: 14.42 MB peak
Yosys 0.9+3760 (git sha1 40e35993, gcc 9.3.0-17ubuntu1~20.04 -fPIC -Os)
Time spent: 31% 2x abc (0 sec), 15% 2x write_verilog (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /home/oleg/RTLtoGDS/tech/osu035/osu035_stdcells.lef
Running vlogFanout
vlogFanout -l 200 -c 30 -I map9v3_nofanout -s nullstring -p /home/oleg/RTLtoGDS/tech/osu035/osu035_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y map9v3_mapped.v map9v3_sized.v

vlogFanout for qflow 1.4.89
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 33 (load 1192.21) from node _4_,
driven by INVX1 with strength 102.797 (fF driven at latency 200)
Top fanout load-to-strength ratio is 11.5978 (latency = 2319.56 ps)
Top input node fanout is 33 (load 443.748) from node clock.
0 gates exceed specified minimum load.
14 buffers were added.
Warning 1: load of 1202.21 is 1.44012 times greater than strongest gate INVX8
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 3: load of 237.964 is 2.18947 times greater than strongest gate NOR2X1
Warning 7: load of 471.017 is 4.33376 times greater than strongest gate NOR2X1
4 gates were changed.

Gate counts by drive strength:

	"" gates	In: 33    	Out: 33    	+0
	"1" gates	In: 132    	Out: 128    	-4
	"2" gates	In: 40    	Out: 40    	+0

41 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"" gates	In: 33    	Out: 33    	+0
	"1" gates	In: 132    	Out: 128    	-4
	"2" gates	In: 40    	Out: 40    	+0

Number of gates changed: 0
Running vlog2Verilog for antenna cell mapping.
vlog2Verilog -c -p -v vdd -g gnd  -l /home/oleg/RTLtoGDS/tech/osu035/osu035_stdcells.lef 
   -o map9v3.v map9v3_sized.v

Generating RTL verilog and SPICE netlist file in directory
	 /home/oleg/RTLtoGDS/projects/map9v3/synthesis
Files:
   Verilog: /home/oleg/RTLtoGDS/projects/map9v3/synthesis/map9v3.rtl.v
   Verilog: /home/oleg/RTLtoGDS/projects/map9v3/synthesis/map9v3.rtlnopwr.v
   Verilog: /home/oleg/RTLtoGDS/projects/map9v3/synthesis/map9v3.rtlbb.v
   Spice:   /home/oleg/RTLtoGDS/projects/map9v3/synthesis/map9v3.spc

Running vlog2Verilog.
vlog2Verilog -c -v vdd -g gnd  -l /home/oleg/RTLtoGDS/tech/osu035/osu035_stdcells.lef 
	-o map9v3.rtl.v
   map9v3.v
vlog2Verilog -c -p -v vdd -g gnd  -l /home/oleg/RTLtoGDS/tech/osu035/osu035_stdcells.lef 
	-o map9v3.rtlnopwr.v
   map9v3.v
/home/oleg/RTLtoGDS/bin/vlog2Verilog -c -p -b -n -v vdd -g gnd  -l /home/oleg/RTLtoGDS/tech/osu035/osu035_stdcells.lef
   -o map9v3.rtlbb.v
Running vlog2Spice.
vlog2Spice -i -l  /home/oleg/RTLtoGDS/tech/osu035/osu035_stdcells.sp -o map9v3.spc map9v3.rtl.v
Running spi2xspice.py
spi2xspice.py "/home/oleg/RTLtoGDS/tech/osu035/osu035_stdcells.lib" map9v3.spc map9v3.xspice

Synthesis script ended on Пн 12 апр 2021 18:36:32 MSK
