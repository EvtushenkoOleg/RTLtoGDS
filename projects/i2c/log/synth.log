Logfile created on Сб 10 апр 2021 00:14:49 MSK
Running yosys for verilog parsing and synthesis
yosys  -s i2c_master_top.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3760 (git sha1 40e35993, gcc 9.3.0-17ubuntu1~20.04 -fPIC -Os)


-- Executing script file `i2c_master_top.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: i2c_master_top.v
Parsing Verilog input from `i2c_master_top.v' to AST representation.
Warning: Found one of those horrible `(synopsys|synthesis) translate_off' comments.
Yosys does support them but it is recommended to use `ifdef constructs instead!
Warning: Found one of those horrible `(synopsys|synthesis) parallel_case' comments.
Yosys does support them but it is recommended to use Verilog `parallel_case' attributes instead!
Generating RTLIL representation for module `\i2c_master_top'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: i2c_master_byte_ctrl.v
Parsing Verilog input from `i2c_master_byte_ctrl.v' to AST representation.
Warning: Found one of those horrible `(synopsys|synthesis) full_case' comments.
Yosys does support them but it is recommended to use Verilog `full_case' attributes instead!
Generating RTLIL representation for module `\i2c_master_byte_ctrl'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: i2c_master_bit_ctrl.v
Parsing Verilog input from `i2c_master_bit_ctrl.v' to AST representation.
Generating RTLIL representation for module `\i2c_master_bit_ctrl'.
Successfully finished Verilog frontend.

5. Executing SYNTH pass.

5.1. Executing HIERARCHY pass (managing design hierarchy).

5.1.1. Analyzing design hierarchy..
Top module:  \i2c_master_top
Used module:     \i2c_master_byte_ctrl
Used module:         \i2c_master_bit_ctrl

5.1.2. Analyzing design hierarchy..
Top module:  \i2c_master_top
Used module:     \i2c_master_byte_ctrl
Used module:         \i2c_master_bit_ctrl
Removed 0 unused modules.

5.2. Executing PROC pass (convert processes to netlists).

5.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$i2c_master_bit_ctrl.v:384$119 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$i2c_master_bit_ctrl.v:348$106 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$i2c_master_bit_ctrl.v:340$103 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$i2c_master_bit_ctrl.v:329$98 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$i2c_master_bit_ctrl.v:310$90 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$i2c_master_bit_ctrl.v:280$78 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$i2c_master_bit_ctrl.v:261$74 in module i2c_master_bit_ctrl.
Marked 3 switch rules as full_case in process $proc$i2c_master_bit_ctrl.v:254$66 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$i2c_master_bit_ctrl.v:235$64 in module i2c_master_bit_ctrl.
Marked 3 switch rules as full_case in process $proc$i2c_master_bit_ctrl.v:208$55 in module i2c_master_bit_ctrl.
Marked 1 switch rules as full_case in process $proc$i2c_master_bit_ctrl.v:198$43 in module i2c_master_bit_ctrl.
Marked 10 switch rules as full_case in process $proc$i2c_master_byte_ctrl.v:201$39 in module i2c_master_byte_ctrl.
Marked 3 switch rules as full_case in process $proc$i2c_master_byte_ctrl.v:184$34 in module i2c_master_byte_ctrl.
Marked 3 switch rules as full_case in process $proc$i2c_master_byte_ctrl.v:173$32 in module i2c_master_byte_ctrl.
Marked 2 switch rules as full_case in process $proc$i2c_master_top.v:284$25 in module i2c_master_top.
Marked 2 switch rules as full_case in process $proc$i2c_master_top.v:260$15 in module i2c_master_top.
Marked 3 switch rules as full_case in process $proc$i2c_master_top.v:201$10 in module i2c_master_top.
Marked 2 switch rules as full_case in process $proc$i2c_master_top.v:177$8 in module i2c_master_top.
Marked 1 switch rules as full_case in process $proc$i2c_master_top.v:162$7 in module i2c_master_top.
Removed a total of 0 dead cases.

5.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 25 redundant assignments.
Promoted 2 assignments to connections.

5.2.4. Executing PROC_INIT pass (extract init attributes).

5.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:384$119'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:348$106'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:340$103'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:329$98'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:310$90'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:280$78'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:261$74'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:254$66'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:235$64'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:208$55'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:198$43'.
Found async reset \nReset in `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.v:201$39'.
Found async reset \nReset in `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.v:184$34'.
Found async reset \nReset in `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.v:173$32'.
Found async reset \rst_i in `\i2c_master_top.$proc$i2c_master_top.v:284$25'.
Found async reset \rst_i in `\i2c_master_top.$proc$i2c_master_top.v:260$15'.
Found async reset \rst_i in `\i2c_master_top.$proc$i2c_master_top.v:201$10'.
Found async reset \rst_i in `\i2c_master_top.$proc$i2c_master_top.v:177$8'.

5.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:384$119'.
     1/5: $0\cmd_ack[0:0]
     2/5: $0\sda_chk[0:0]
     3/5: $0\c_state[17:0]
     4/5: $0\sda_oen[0:0]
     5/5: $0\scl_oen[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:358$116'.
     1/1: $0\dout[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:348$106'.
     1/1: $0\al[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:340$103'.
     1/1: $0\cmd_stop[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:329$98'.
     1/1: $0\busy[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:310$90'.
     1/2: $0\sto_condition[0:0]
     2/2: $0\sta_condition[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:280$78'.
     1/4: $0\dSDA[0:0]
     2/4: $0\dSCL[0:0]
     3/4: $0\sSDA[0:0]
     4/4: $0\sSCL[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:261$74'.
     1/2: $0\fSDA[2:0]
     2/2: $0\fSCL[2:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:254$66'.
     1/1: $0\filter_cnt[13:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:235$64'.
     1/2: $0\cSDA[1:0]
     2/2: $0\cSCL[1:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:208$55'.
     1/2: $0\clk_en[0:0]
     2/2: $0\cnt[15:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:198$43'.
     1/1: $0\slave_wait[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:193$42'.
Creating decoders for process `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.v:201$39'.
     1/7: $0\cmd_ack[0:0]
     2/7: $0\ld[0:0]
     3/7: $0\shift[0:0]
     4/7: $0\core_txd[0:0]
     5/7: $0\c_state[4:0]
     6/7: $0\core_cmd[3:0]
     7/7: $0\ack_out[0:0]
Creating decoders for process `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.v:184$34'.
     1/1: $0\dcnt[2:0]
Creating decoders for process `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.v:173$32'.
     1/1: $0\sr[7:0]
Creating decoders for process `\i2c_master_top.$proc$i2c_master_top.v:284$25'.
     1/1: $0\wb_inta_o[0:0]
Creating decoders for process `\i2c_master_top.$proc$i2c_master_top.v:260$15'.
     1/4: $0\irq_flag[0:0]
     2/4: $0\tip[0:0]
     3/4: $0\rxack[0:0]
     4/4: $0\al[0:0]
Creating decoders for process `\i2c_master_top.$proc$i2c_master_top.v:201$10'.
     1/4: $0\cr[7:0] [7:4]
     2/4: $0\cr[7:0] [3]
     3/4: $0\cr[7:0] [2:1]
     4/4: $0\cr[7:0] [0]
Creating decoders for process `\i2c_master_top.$proc$i2c_master_top.v:177$8'.
     1/4: $0\prer[15:0] [15:8]
     2/4: $0\prer[15:0] [7:0]
     3/4: $0\ctr[7:0]
     4/4: $0\txr[7:0]
Creating decoders for process `\i2c_master_top.$proc$i2c_master_top.v:162$7'.
     1/1: $0\wb_dat_o[7:0]
Creating decoders for process `\i2c_master_top.$proc$i2c_master_top.v:158$3'.

5.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

5.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\i2c_master_bit_ctrl.\cmd_ack' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:384$119'.
  created $adff cell `$procdff$558' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\scl_oen' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:384$119'.
  created $adff cell `$procdff$559' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sda_oen' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:384$119'.
  created $adff cell `$procdff$560' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\c_state' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:384$119'.
  created $adff cell `$procdff$561' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sda_chk' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:384$119'.
  created $adff cell `$procdff$562' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\dout' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:358$116'.
  created $dff cell `$procdff$563' with positive edge clock.
Creating register for signal `\i2c_master_bit_ctrl.\al' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:348$106'.
  created $adff cell `$procdff$564' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\cmd_stop' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:340$103'.
  created $adff cell `$procdff$565' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\busy' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:329$98'.
  created $adff cell `$procdff$566' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sta_condition' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:310$90'.
  created $adff cell `$procdff$567' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sto_condition' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:310$90'.
  created $adff cell `$procdff$568' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sSCL' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:280$78'.
  created $adff cell `$procdff$569' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sSDA' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:280$78'.
  created $adff cell `$procdff$570' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\dSCL' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:280$78'.
  created $adff cell `$procdff$571' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\dSDA' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:280$78'.
  created $adff cell `$procdff$572' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\fSCL' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:261$74'.
  created $adff cell `$procdff$573' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\fSDA' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:261$74'.
  created $adff cell `$procdff$574' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\filter_cnt' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:254$66'.
  created $adff cell `$procdff$575' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\cSCL' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:235$64'.
  created $adff cell `$procdff$576' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\cSDA' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:235$64'.
  created $adff cell `$procdff$577' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\clk_en' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:208$55'.
  created $adff cell `$procdff$578' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\cnt' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:208$55'.
  created $adff cell `$procdff$579' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\slave_wait' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:198$43'.
  created $adff cell `$procdff$580' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\dscl_oen' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:193$42'.
  created $dff cell `$procdff$581' with positive edge clock.
Creating register for signal `\i2c_master_byte_ctrl.\cmd_ack' using process `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.v:201$39'.
  created $adff cell `$procdff$582' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\ack_out' using process `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.v:201$39'.
  created $adff cell `$procdff$583' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\core_cmd' using process `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.v:201$39'.
  created $adff cell `$procdff$584' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\core_txd' using process `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.v:201$39'.
  created $adff cell `$procdff$585' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\shift' using process `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.v:201$39'.
  created $adff cell `$procdff$586' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\ld' using process `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.v:201$39'.
  created $adff cell `$procdff$587' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\c_state' using process `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.v:201$39'.
  created $adff cell `$procdff$588' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\dcnt' using process `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.v:184$34'.
  created $adff cell `$procdff$589' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\sr' using process `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.v:173$32'.
  created $adff cell `$procdff$590' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\wb_inta_o' using process `\i2c_master_top.$proc$i2c_master_top.v:284$25'.
  created $adff cell `$procdff$591' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\rxack' using process `\i2c_master_top.$proc$i2c_master_top.v:260$15'.
  created $adff cell `$procdff$592' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\tip' using process `\i2c_master_top.$proc$i2c_master_top.v:260$15'.
  created $adff cell `$procdff$593' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\irq_flag' using process `\i2c_master_top.$proc$i2c_master_top.v:260$15'.
  created $adff cell `$procdff$594' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\al' using process `\i2c_master_top.$proc$i2c_master_top.v:260$15'.
  created $adff cell `$procdff$595' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\cr' using process `\i2c_master_top.$proc$i2c_master_top.v:201$10'.
  created $adff cell `$procdff$596' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\prer' using process `\i2c_master_top.$proc$i2c_master_top.v:177$8'.
  created $adff cell `$procdff$597' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\ctr' using process `\i2c_master_top.$proc$i2c_master_top.v:177$8'.
  created $adff cell `$procdff$598' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\txr' using process `\i2c_master_top.$proc$i2c_master_top.v:177$8'.
  created $adff cell `$procdff$599' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\wb_dat_o' using process `\i2c_master_top.$proc$i2c_master_top.v:162$7'.
  created $dff cell `$procdff$600' with positive edge clock.
Creating register for signal `\i2c_master_top.\wb_ack_o' using process `\i2c_master_top.$proc$i2c_master_top.v:158$3'.
  created $dff cell `$procdff$601' with positive edge clock.

5.2.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:384$119'.
Removing empty process `i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:384$119'.
Found and cleaned up 1 empty switch in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:358$116'.
Removing empty process `i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:358$116'.
Found and cleaned up 1 empty switch in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:348$106'.
Removing empty process `i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:348$106'.
Found and cleaned up 2 empty switches in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:340$103'.
Removing empty process `i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:340$103'.
Found and cleaned up 1 empty switch in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:329$98'.
Removing empty process `i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:329$98'.
Found and cleaned up 1 empty switch in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:310$90'.
Removing empty process `i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:310$90'.
Found and cleaned up 1 empty switch in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:280$78'.
Removing empty process `i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:280$78'.
Found and cleaned up 2 empty switches in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:261$74'.
Removing empty process `i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:261$74'.
Found and cleaned up 2 empty switches in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:254$66'.
Removing empty process `i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:254$66'.
Found and cleaned up 1 empty switch in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:235$64'.
Removing empty process `i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:235$64'.
Found and cleaned up 2 empty switches in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:208$55'.
Removing empty process `i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:208$55'.
Removing empty process `i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:198$43'.
Removing empty process `i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.v:193$42'.
Found and cleaned up 15 empty switches in `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.v:201$39'.
Removing empty process `i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.v:201$39'.
Found and cleaned up 3 empty switches in `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.v:184$34'.
Removing empty process `i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.v:184$34'.
Found and cleaned up 3 empty switches in `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.v:173$32'.
Removing empty process `i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.v:173$32'.
Found and cleaned up 1 empty switch in `\i2c_master_top.$proc$i2c_master_top.v:284$25'.
Removing empty process `i2c_master_top.$proc$i2c_master_top.v:284$25'.
Found and cleaned up 1 empty switch in `\i2c_master_top.$proc$i2c_master_top.v:260$15'.
Removing empty process `i2c_master_top.$proc$i2c_master_top.v:260$15'.
Found and cleaned up 4 empty switches in `\i2c_master_top.$proc$i2c_master_top.v:201$10'.
Removing empty process `i2c_master_top.$proc$i2c_master_top.v:201$10'.
Found and cleaned up 3 empty switches in `\i2c_master_top.$proc$i2c_master_top.v:177$8'.
Removing empty process `i2c_master_top.$proc$i2c_master_top.v:177$8'.
Found and cleaned up 1 empty switch in `\i2c_master_top.$proc$i2c_master_top.v:162$7'.
Removing empty process `i2c_master_top.$proc$i2c_master_top.v:162$7'.
Removing empty process `i2c_master_top.$proc$i2c_master_top.v:158$3'.
Cleaned up 49 empty switches.

5.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_bit_ctrl.
<suppressed ~8 debug messages>
Optimizing module i2c_master_byte_ctrl.
<suppressed ~8 debug messages>
Optimizing module i2c_master_top.
<suppressed ~3 debug messages>

5.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Finding unused cells or wires in module \i2c_master_top..
Removed 21 unused cells and 183 unused wires.
<suppressed ~25 debug messages>

5.5. Executing CHECK pass (checking for obvious problems).
Checking module i2c_master_bit_ctrl...
Checking module i2c_master_byte_ctrl...
Checking module i2c_master_top...
Found and reported 0 problems.

5.6. Executing OPT pass (performing simple optimizations).

5.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.
Optimizing module i2c_master_top.

5.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_bit_ctrl'.
<suppressed ~192 debug messages>
Finding identical cells in module `\i2c_master_byte_ctrl'.
<suppressed ~45 debug messages>
Finding identical cells in module `\i2c_master_top'.
<suppressed ~18 debug messages>
Removed a total of 85 cells.

5.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_bit_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_byte_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~45 debug messages>

5.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_bit_ctrl.
    New ctrl vector for $pmux cell $procmux$122: $auto$opt_reduce.cc:134:opt_mux$603
    New ctrl vector for $pmux cell $procmux$132: { $procmux$134_CMP $auto$opt_reduce.cc:134:opt_mux$605 }
    New ctrl vector for $pmux cell $procmux$156: { $procmux$150_CMP $procmux$149_CMP $procmux$148_CMP $procmux$147_CMP $procmux$146_CMP $procmux$144_CMP $procmux$143_CMP $procmux$142_CMP $procmux$140_CMP $procmux$139_CMP $procmux$138_CMP $procmux$136_CMP $procmux$135_CMP $procmux$134_CMP $auto$opt_reduce.cc:134:opt_mux$607 }
    New ctrl vector for $pmux cell $procmux$186: { $procmux$150_CMP $auto$opt_reduce.cc:134:opt_mux$613 $auto$opt_reduce.cc:134:opt_mux$611 $auto$opt_reduce.cc:134:opt_mux$609 }
    New ctrl vector for $pmux cell $procmux$210: { $auto$opt_reduce.cc:134:opt_mux$619 $auto$opt_reduce.cc:134:opt_mux$617 $auto$opt_reduce.cc:134:opt_mux$615 }
  Optimizing cells in module \i2c_master_bit_ctrl.
  Optimizing cells in module \i2c_master_byte_ctrl.
  Optimizing cells in module \i2c_master_top.
Performed a total of 5 changes.

5.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_bit_ctrl'.
<suppressed ~3 debug messages>
Finding identical cells in module `\i2c_master_byte_ctrl'.
<suppressed ~6 debug messages>
Finding identical cells in module `\i2c_master_top'.
Removed a total of 3 cells.

5.6.6. Executing OPT_DFF pass (perform DFF optimizations).

5.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Finding unused cells or wires in module \i2c_master_top..
Removed 0 unused cells and 88 unused wires.
<suppressed ~3 debug messages>

5.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.
Optimizing module i2c_master_top.

5.6.9. Rerunning OPT passes. (Maybe there is more to do..)

5.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_bit_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_byte_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

5.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_bit_ctrl.
  Optimizing cells in module \i2c_master_byte_ctrl.
  Optimizing cells in module \i2c_master_top.
Performed a total of 0 changes.

5.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

5.6.13. Executing OPT_DFF pass (perform DFF optimizations).

5.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Finding unused cells or wires in module \i2c_master_top..

5.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.
Optimizing module i2c_master_top.

5.6.16. Finished OPT passes. (There is nothing left to do.)

5.7. Executing FSM pass (extract and optimize FSM).

5.7.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking i2c_master_bit_ctrl.c_state as FSM state register:
    Users of register don't seem to benefit from recoding.
Found FSM state register i2c_master_byte_ctrl.c_state.
Not marking i2c_master_byte_ctrl.core_cmd as FSM state register:
    Users of register don't seem to benefit from recoding.

5.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\c_state' from module `\i2c_master_byte_ctrl'.
  found $adff cell for state register: $procdff$588
  root of input selection tree: $0\c_state[4:0]
  found reset state: 5'00000 (from async reset)
  found ctrl input: $or$i2c_master_byte_ctrl.v:212$41_Y
  found ctrl input: $procmux$301_CMP
  found ctrl input: $procmux$308_CMP
  found ctrl input: $procmux$331_CMP
  found ctrl input: $procmux$337_CMP
  found ctrl input: $procmux$319_CMP
  found ctrl input: $procmux$322_CMP
  found ctrl input: \core_ack
  found ctrl input: \stop
  found state code: 5'10000
  found ctrl input: $reduce_or$i2c_master_byte_ctrl.v:194$37_Y
  found state code: 5'01000
  found state code: 5'00010
  found state code: 5'00100
  found ctrl input: \read
  found ctrl input: \go
  found ctrl input: \start
  found ctrl input: \write
  found state code: 5'00001
  found ctrl output: $procmux$301_CMP
  found ctrl output: $procmux$308_CMP
  found ctrl output: $procmux$319_CMP
  found ctrl output: $procmux$322_CMP
  found ctrl output: $procmux$331_CMP
  found ctrl output: $procmux$337_CMP
  ctrl inputs: { $or$i2c_master_byte_ctrl.v:212$41_Y $reduce_or$i2c_master_byte_ctrl.v:194$37_Y \go \core_ack \write \read \stop \start }
  ctrl outputs: { $procmux$337_CMP $procmux$331_CMP $procmux$322_CMP $procmux$319_CMP $procmux$308_CMP $procmux$301_CMP $0\c_state[4:0] }
  transition:    5'00000 8'0-0----- ->    5'00000 11'00100000000
  transition:    5'00000 8'0-1-00-0 ->    5'10000 11'00100010000
  transition:    5'00000 8'0-1-10-0 ->    5'00100 11'00100000100
  transition:    5'00000 8'0-1--1-0 ->    5'00010 11'00100000010
  transition:    5'00000 8'0-1----1 ->    5'00001 11'00100000001
  transition:    5'00000 8'1------- ->    5'00000 11'00100000000
  transition:    5'10000 8'0--0---- ->    5'10000 11'00000110000
  transition:    5'10000 8'0--1---- ->    5'00000 11'00000100000
  transition:    5'10000 8'1------- ->    5'00000 11'00000100000
  transition:    5'01000 8'0--0---- ->    5'01000 11'00001001000
  transition:    5'01000 8'0--1--0- ->    5'00000 11'00001000000
  transition:    5'01000 8'0--1--1- ->    5'10000 11'00001010000
  transition:    5'01000 8'1------- ->    5'00000 11'00001000000
  transition:    5'00100 8'0--0---- ->    5'00100 11'10000000100
  transition:    5'00100 8'00-1---- ->    5'01000 11'10000001000
  transition:    5'00100 8'01-1---- ->    5'00100 11'10000000100
  transition:    5'00100 8'1------- ->    5'00000 11'10000000000
  transition:    5'00010 8'0--0---- ->    5'00010 11'01000000010
  transition:    5'00010 8'00-1---- ->    5'01000 11'01000001000
  transition:    5'00010 8'01-1---- ->    5'00010 11'01000000010
  transition:    5'00010 8'1------- ->    5'00000 11'01000000000
  transition:    5'00001 8'0--0---- ->    5'00001 11'00010000001
  transition:    5'00001 8'0--1-0-- ->    5'00100 11'00010000100
  transition:    5'00001 8'0--1-1-- ->    5'00010 11'00010000010
  transition:    5'00001 8'1------- ->    5'00000 11'00010000000

5.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\c_state$620' from module `\i2c_master_byte_ctrl'.

5.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Finding unused cells or wires in module \i2c_master_top..
Removed 22 unused cells and 22 unused wires.
<suppressed ~23 debug messages>

5.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\c_state$620' from module `\i2c_master_byte_ctrl'.
  Removing unused output signal $0\c_state[4:0] [0].
  Removing unused output signal $0\c_state[4:0] [1].
  Removing unused output signal $0\c_state[4:0] [2].
  Removing unused output signal $0\c_state[4:0] [3].
  Removing unused output signal $0\c_state[4:0] [4].

5.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\c_state$620' from module `\i2c_master_byte_ctrl' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  00000 -> -----1
  10000 -> ----1-
  01000 -> ---1--
  00100 -> --1---
  00010 -> -1----
  00001 -> 1-----

5.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\c_state$620' from module `i2c_master_byte_ctrl':
-------------------------------------

  Information on FSM $fsm$\c_state$620 (\c_state):

  Number of input signals:    8
  Number of output signals:   6
  Number of state bits:       6

  Input signals:
    0: \start
    1: \stop
    2: \read
    3: \write
    4: \core_ack
    5: \go
    6: $reduce_or$i2c_master_byte_ctrl.v:194$37_Y
    7: $or$i2c_master_byte_ctrl.v:212$41_Y

  Output signals:
    0: $procmux$301_CMP
    1: $procmux$308_CMP
    2: $procmux$319_CMP
    3: $procmux$322_CMP
    4: $procmux$331_CMP
    5: $procmux$337_CMP

  State encoding:
    0:   6'-----1  <RESET STATE>
    1:   6'----1-
    2:   6'---1--
    3:   6'--1---
    4:   6'-1----
    5:   6'1-----

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 8'0-0-----   ->     0 6'001000
      1:     0 8'1-------   ->     0 6'001000
      2:     0 8'0-1-00-0   ->     1 6'001000
      3:     0 8'0-1-10-0   ->     3 6'001000
      4:     0 8'0-1--1-0   ->     4 6'001000
      5:     0 8'0-1----1   ->     5 6'001000
      6:     1 8'0--1----   ->     0 6'000001
      7:     1 8'1-------   ->     0 6'000001
      8:     1 8'0--0----   ->     1 6'000001
      9:     2 8'0--1--0-   ->     0 6'000010
     10:     2 8'1-------   ->     0 6'000010
     11:     2 8'0--1--1-   ->     1 6'000010
     12:     2 8'0--0----   ->     2 6'000010
     13:     3 8'1-------   ->     0 6'100000
     14:     3 8'00-1----   ->     2 6'100000
     15:     3 8'0--0----   ->     3 6'100000
     16:     3 8'01-1----   ->     3 6'100000
     17:     4 8'1-------   ->     0 6'010000
     18:     4 8'00-1----   ->     2 6'010000
     19:     4 8'0--0----   ->     4 6'010000
     20:     4 8'01-1----   ->     4 6'010000
     21:     5 8'1-------   ->     0 6'000100
     22:     5 8'0--1-0--   ->     3 6'000100
     23:     5 8'0--1-1--   ->     4 6'000100
     24:     5 8'0--0----   ->     5 6'000100

-------------------------------------

5.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\c_state$620' from module `\i2c_master_byte_ctrl'.

5.8. Executing OPT pass (performing simple optimizations).

5.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.
<suppressed ~7 debug messages>
Optimizing module i2c_master_top.

5.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
<suppressed ~15 debug messages>
Finding identical cells in module `\i2c_master_top'.
Removed a total of 5 cells.

5.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_bit_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_byte_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~45 debug messages>

5.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_bit_ctrl.
  Optimizing cells in module \i2c_master_byte_ctrl.
  Optimizing cells in module \i2c_master_top.
Performed a total of 0 changes.

5.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

5.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$579 ($adff) from module i2c_master_bit_ctrl (D = $0\cnt[15:0], Q = \cnt).
Adding EN signal on $procdff$574 ($adff) from module i2c_master_bit_ctrl (D = $0\fSDA[2:0], Q = \fSDA).
Adding EN signal on $procdff$573 ($adff) from module i2c_master_bit_ctrl (D = $0\fSCL[2:0], Q = \fSCL).
Adding EN signal on $procdff$565 ($adff) from module i2c_master_bit_ctrl (D = $0\cmd_stop[0:0], Q = \cmd_stop).
Adding EN signal on $procdff$563 ($dff) from module i2c_master_bit_ctrl (D = \sSDA, Q = \dout).
Adding EN signal on $procdff$562 ($adff) from module i2c_master_bit_ctrl (D = $0\sda_chk[0:0], Q = \sda_chk).
Adding EN signal on $procdff$561 ($adff) from module i2c_master_bit_ctrl (D = $0\c_state[17:0], Q = \c_state).
Adding EN signal on $procdff$560 ($adff) from module i2c_master_bit_ctrl (D = $0\sda_oen[0:0], Q = \sda_oen).
Adding EN signal on $procdff$559 ($adff) from module i2c_master_bit_ctrl (D = $0\scl_oen[0:0], Q = \scl_oen).
Adding EN signal on $procdff$590 ($adff) from module i2c_master_byte_ctrl (D = $0\sr[7:0], Q = \sr).
Adding EN signal on $procdff$589 ($adff) from module i2c_master_byte_ctrl (D = $0\dcnt[2:0], Q = \dcnt).
Adding EN signal on $procdff$584 ($adff) from module i2c_master_byte_ctrl (D = $0\core_cmd[3:0], Q = \core_cmd).
Adding EN signal on $procdff$583 ($adff) from module i2c_master_byte_ctrl (D = $0\ack_out[0:0], Q = \ack_out).
Adding EN signal on $procdff$599 ($adff) from module i2c_master_top (D = $0\txr[7:0], Q = \txr).
Adding EN signal on $procdff$598 ($adff) from module i2c_master_top (D = $0\ctr[7:0], Q = \ctr).
Adding EN signal on $procdff$597 ($adff) from module i2c_master_top (D = $0\prer[15:0] [15:8], Q = \prer [15:8]).
Adding EN signal on $procdff$597 ($adff) from module i2c_master_top (D = $0\prer[15:0] [7:0], Q = \prer [7:0]).
Adding EN signal on $procdff$596 ($adff) from module i2c_master_top (D = $0\cr[7:0] [3], Q = \cr [3]).
Adding EN signal on $procdff$596 ($adff) from module i2c_master_top (D = $0\cr[7:0] [7:4], Q = \cr [7:4]).
Adding EN signal on $procdff$596 ($adff) from module i2c_master_top (D = $0\cr[7:0] [2:0], Q = \cr [2:0]).

5.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Finding unused cells or wires in module \i2c_master_top..
Removed 1 unused cells and 16 unused wires.
<suppressed ~3 debug messages>

5.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_bit_ctrl.
<suppressed ~5 debug messages>
Optimizing module i2c_master_byte_ctrl.
<suppressed ~4 debug messages>
Optimizing module i2c_master_top.
<suppressed ~6 debug messages>

5.8.9. Rerunning OPT passes. (Maybe there is more to do..)

5.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_bit_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_byte_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~44 debug messages>

5.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_bit_ctrl.
    New ctrl vector for $pmux cell $procmux$186: { $auto$opt_reduce.cc:134:opt_mux$613 $auto$opt_reduce.cc:134:opt_mux$611 $auto$opt_reduce.cc:134:opt_mux$609 }
    New ctrl vector for $pmux cell $procmux$210: { $auto$opt_reduce.cc:134:opt_mux$617 $auto$opt_reduce.cc:134:opt_mux$615 }
  Optimizing cells in module \i2c_master_bit_ctrl.
  Optimizing cells in module \i2c_master_byte_ctrl.
  Optimizing cells in module \i2c_master_top.
Performed a total of 2 changes.

5.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_bit_ctrl'.
<suppressed ~12 debug messages>
Finding identical cells in module `\i2c_master_byte_ctrl'.
<suppressed ~6 debug messages>
Finding identical cells in module `\i2c_master_top'.
<suppressed ~18 debug messages>
Removed a total of 12 cells.

5.8.13. Executing OPT_DFF pass (perform DFF optimizations).

5.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Finding unused cells or wires in module \i2c_master_top..
Removed 0 unused cells and 12 unused wires.
<suppressed ~3 debug messages>

5.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.
Optimizing module i2c_master_top.

5.8.16. Rerunning OPT passes. (Maybe there is more to do..)

5.8.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_bit_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_byte_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~44 debug messages>

5.8.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_bit_ctrl.
  Optimizing cells in module \i2c_master_byte_ctrl.
  Optimizing cells in module \i2c_master_top.
Performed a total of 0 changes.

5.8.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

5.8.20. Executing OPT_DFF pass (perform DFF optimizations).

5.8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Finding unused cells or wires in module \i2c_master_top..

5.8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.
Optimizing module i2c_master_top.

5.8.23. Finished OPT passes. (There is nothing left to do.)

5.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 15 bits (of 16) from port B of cell i2c_master_bit_ctrl.$sub$i2c_master_bit_ctrl.v:226$63 ($sub).
Removed top 31 bits (of 32) from port B of cell i2c_master_bit_ctrl.$sub$i2c_master_bit_ctrl.v:258$73 ($sub).
Removed top 18 bits (of 32) from port Y of cell i2c_master_bit_ctrl.$sub$i2c_master_bit_ctrl.v:258$73 ($sub).
Removed top 2 bits (of 4) from port B of cell i2c_master_bit_ctrl.$eq$i2c_master_bit_ctrl.v:346$105 ($eq).
Removed top 1 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$123_CMP0 ($eq).
Removed top 5 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$124_CMP0 ($eq).
Removed top 9 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$125_CMP0 ($eq).
Removed top 13 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$126_CMP0 ($eq).
Removed top 2 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$134_CMP0 ($eq).
Removed top 3 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$135_CMP0 ($eq).
Removed top 4 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$136_CMP0 ($eq).
Removed top 6 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$138_CMP0 ($eq).
Removed top 7 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$139_CMP0 ($eq).
Removed top 8 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$140_CMP0 ($eq).
Removed top 10 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$142_CMP0 ($eq).
Removed top 11 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$143_CMP0 ($eq).
Removed top 12 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$144_CMP0 ($eq).
Removed top 14 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$146_CMP0 ($eq).
Removed top 15 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$147_CMP0 ($eq).
Removed top 16 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$148_CMP0 ($eq).
Removed top 17 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$149_CMP0 ($eq).
Removed cell i2c_master_bit_ctrl.$procmux$151 ($mux).
Removed top 4 bits (of 18) from mux cell i2c_master_bit_ctrl.$procmux$175 ($pmux).
Removed top 1 bits (of 4) from port B of cell i2c_master_bit_ctrl.$procmux$177_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell i2c_master_bit_ctrl.$procmux$179_CMP0 ($eq).
Removed cell i2c_master_bit_ctrl.$procmux$181 ($mux).
Removed cell i2c_master_bit_ctrl.$procmux$205 ($mux).
Removed cell i2c_master_bit_ctrl.$procmux$229 ($mux).
Removed cell i2c_master_bit_ctrl.$procmux$239 ($mux).
Removed cell i2c_master_bit_ctrl.$procmux$265 ($mux).
Removed cell i2c_master_bit_ctrl.$procmux$270 ($mux).
Removed cell i2c_master_bit_ctrl.$procmux$293 ($mux).
Removed top 1 bits (of 2) from port B of cell i2c_master_bit_ctrl.$auto$opt_dff.cc:218:make_patterns_logic$715 ($ne).
Removed top 4 bits (of 18) from wire i2c_master_bit_ctrl.$procmux$175_Y.
Removed top 18 bits (of 32) from wire i2c_master_bit_ctrl.$sub$i2c_master_bit_ctrl.v:258$73_Y.
Removed top 2 bits (of 3) from port B of cell i2c_master_byte_ctrl.$sub$i2c_master_byte_ctrl.v:192$36 ($sub).
Removed top 1 bits (of 4) from port B of cell i2c_master_byte_ctrl.$auto$fsm_map.cc:77:implement_pattern_cache$689 ($eq).
Removed top 1 bits (of 3) from port B of cell i2c_master_byte_ctrl.$auto$fsm_map.cc:77:implement_pattern_cache$693 ($eq).
Removed top 1 bits (of 3) from port B of cell i2c_master_byte_ctrl.$auto$fsm_map.cc:77:implement_pattern_cache$701 ($eq).
Removed top 1 bits (of 3) from port B of cell i2c_master_byte_ctrl.$auto$fsm_map.cc:77:implement_pattern_cache$706 ($eq).
Removed top 1 bits (of 3) from port B of cell i2c_master_byte_ctrl.$auto$opt_dff.cc:218:make_patterns_logic$754 ($ne).
Removed top 1 bits (of 3) from port B of cell i2c_master_byte_ctrl.$auto$opt_dff.cc:218:make_patterns_logic$756 ($ne).
Removed top 1 bits (of 3) from port B of cell i2c_master_byte_ctrl.$auto$opt_dff.cc:218:make_patterns_logic$758 ($ne).
Removed top 1 bits (of 3) from port B of cell i2c_master_byte_ctrl.$auto$opt_dff.cc:218:make_patterns_logic$760 ($ne).
Removed top 1 bits (of 3) from port B of cell i2c_master_byte_ctrl.$auto$opt_dff.cc:218:make_patterns_logic$762 ($ne).
Removed top 1 bits (of 3) from port B of cell i2c_master_byte_ctrl.$auto$opt_dff.cc:218:make_patterns_logic$764 ($ne).
Removed top 1 bits (of 5) from port B of cell i2c_master_byte_ctrl.$auto$fsm_map.cc:77:implement_pattern_cache$672 ($eq).
Removed top 2 bits (of 3) from port B of cell i2c_master_byte_ctrl.$auto$fsm_map.cc:77:implement_pattern_cache$665 ($eq).
Removed top 1 bits (of 2) from port B of cell i2c_master_byte_ctrl.$auto$fsm_map.cc:77:implement_pattern_cache$637 ($eq).
Removed top 1 bits (of 3) from port B of cell i2c_master_byte_ctrl.$auto$fsm_map.cc:77:implement_pattern_cache$676 ($eq).
Removed top 1 bits (of 5) from port B of cell i2c_master_byte_ctrl.$auto$fsm_map.cc:77:implement_pattern_cache$648 ($eq).
Removed top 1 bits (of 3) from port B of cell i2c_master_byte_ctrl.$auto$fsm_map.cc:77:implement_pattern_cache$652 ($eq).
Removed cell i2c_master_byte_ctrl.$procmux$397 ($mux).
Removed top 2 bits (of 4) from mux cell i2c_master_byte_ctrl.$procmux$403 ($mux).
Removed cell i2c_master_byte_ctrl.$procmux$405 ($mux).
Removed cell i2c_master_byte_ctrl.$procmux$411 ($mux).
Removed cell i2c_master_byte_ctrl.$procmux$417 ($mux).
Removed cell i2c_master_byte_ctrl.$procmux$423 ($mux).
Removed top 1 bits (of 4) from mux cell i2c_master_byte_ctrl.$procmux$427 ($mux).
Removed cell i2c_master_byte_ctrl.$procmux$435 ($mux).
Removed cell i2c_master_byte_ctrl.$procmux$443 ($mux).
Removed cell i2c_master_byte_ctrl.$procmux$445 ($mux).
Removed cell i2c_master_byte_ctrl.$procmux$450 ($mux).
Removed cell i2c_master_byte_ctrl.$procmux$458 ($mux).
Removed top 1 bits (of 3) from port B of cell i2c_master_byte_ctrl.$auto$fsm_map.cc:77:implement_pattern_cache$633 ($eq).
Removed top 2 bits (of 4) from wire i2c_master_byte_ctrl.$procmux$403_Y.
Removed top 1 bits (of 4) from wire i2c_master_byte_ctrl.$procmux$427_Y.
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$opt_dff.cc:218:make_patterns_logic$808 ($ne).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$opt_dff.cc:218:make_patterns_logic$801 ($ne).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$opt_dff.cc:218:make_patterns_logic$794 ($ne).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$opt_dff.cc:218:make_patterns_logic$787 ($ne).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$opt_dff.cc:218:make_patterns_logic$780 ($ne).
Removed cell i2c_master_top.$procmux$481 ($mux).
Removed cell i2c_master_top.$procmux$484 ($mux).
Removed cell i2c_master_top.$procmux$492 ($mux).
Removed cell i2c_master_top.$procmux$494 ($mux).
Removed cell i2c_master_top.$procmux$500 ($mux).
Removed cell i2c_master_top.$procmux$508 ($mux).
Removed top 2 bits (of 3) from port B of cell i2c_master_top.$procmux$518_CMP0 ($eq).
Removed cell i2c_master_top.$procmux$517 ($mux).
Removed cell i2c_master_top.$procmux$519 ($mux).
Removed cell i2c_master_top.$procmux$527 ($mux).
Removed cell i2c_master_top.$procmux$529 ($mux).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$procmux$536_CMP0 ($eq).
Removed cell i2c_master_top.$procmux$535 ($mux).
Removed cell i2c_master_top.$procmux$537 ($mux).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$procmux$543_CMP0 ($eq).
Removed cell i2c_master_top.$procmux$542 ($mux).
Removed cell i2c_master_top.$procmux$544 ($mux).

5.10. Executing PEEPOPT pass (run peephole optimizers).

5.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Finding unused cells or wires in module \i2c_master_top..
Removed 0 unused cells and 36 unused wires.
<suppressed ~3 debug messages>

5.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module i2c_master_bit_ctrl:
  creating $macc model for $sub$i2c_master_bit_ctrl.v:226$63 ($sub).
  creating $macc model for $sub$i2c_master_bit_ctrl.v:258$73 ($sub).
  creating $alu model for $macc $sub$i2c_master_bit_ctrl.v:258$73.
  creating $alu model for $macc $sub$i2c_master_bit_ctrl.v:226$63.
  creating $alu cell for $sub$i2c_master_bit_ctrl.v:226$63: $auto$alumacc.cc:485:replace_alu$826
  creating $alu cell for $sub$i2c_master_bit_ctrl.v:258$73: $auto$alumacc.cc:485:replace_alu$829
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module i2c_master_byte_ctrl:
  creating $macc model for $sub$i2c_master_byte_ctrl.v:192$36 ($sub).
  creating $alu model for $macc $sub$i2c_master_byte_ctrl.v:192$36.
  creating $alu cell for $sub$i2c_master_byte_ctrl.v:192$36: $auto$alumacc.cc:485:replace_alu$832
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module i2c_master_top:
  created 0 $alu and 0 $macc cells.

5.13. Executing SHARE pass (SAT-based resource sharing).

5.14. Executing OPT pass (performing simple optimizations).

5.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.
Optimizing module i2c_master_top.

5.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

5.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_bit_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_byte_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~44 debug messages>

5.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_bit_ctrl.
  Optimizing cells in module \i2c_master_byte_ctrl.
  Optimizing cells in module \i2c_master_top.
Performed a total of 0 changes.

5.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
Finding identical cells in module `\i2c_master_top'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

5.14.6. Executing OPT_DFF pass (perform DFF optimizations).

5.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Finding unused cells or wires in module \i2c_master_top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

5.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.
Optimizing module i2c_master_top.

5.14.9. Rerunning OPT passes. (Maybe there is more to do..)

5.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_bit_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_byte_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~42 debug messages>

5.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_bit_ctrl.
  Optimizing cells in module \i2c_master_byte_ctrl.
  Optimizing cells in module \i2c_master_top.
Performed a total of 0 changes.

5.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

5.14.13. Executing OPT_DFF pass (perform DFF optimizations).

5.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Finding unused cells or wires in module \i2c_master_top..

5.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.
Optimizing module i2c_master_top.

5.14.16. Finished OPT passes. (There is nothing left to do.)

5.15. Executing MEMORY pass.

5.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

5.15.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

5.15.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Finding unused cells or wires in module \i2c_master_top..

5.15.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.15.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Finding unused cells or wires in module \i2c_master_top..

5.15.6. Executing MEMORY_COLLECT pass (generating $mem cells).

5.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Finding unused cells or wires in module \i2c_master_top..

5.17. Executing OPT pass (performing simple optimizations).

5.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_bit_ctrl.
<suppressed ~15 debug messages>
Optimizing module i2c_master_byte_ctrl.
<suppressed ~8 debug messages>
Optimizing module i2c_master_top.
<suppressed ~2 debug messages>

5.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

5.17.3. Executing OPT_DFF pass (perform DFF optimizations).

5.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Finding unused cells or wires in module \i2c_master_top..
Removed 2 unused cells and 7 unused wires.
<suppressed ~4 debug messages>

5.17.5. Finished fast OPT passes.

5.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

5.19. Executing OPT pass (performing simple optimizations).

5.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.
Optimizing module i2c_master_top.

5.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

5.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_bit_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_byte_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

5.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_bit_ctrl.
    Consolidated identical input bits for $pmux cell $procmux$156:
      Old ports: A={ 4'0000 $auto$wreduce.cc:454:run$822 [13:0] }, B=252'000000000000000010000000000000000100000000000000001000000000000000010000000000000001000000000000000010000000000000000100000000000000010000000000000000100000000000000001000000000000000100000000000000001000000000000000010000000000000000000000000000000000, Y=$procmux$156_Y
      New ports: A={ 3'000 $auto$wreduce.cc:454:run$822 [13:0] }, B=238'0000000000000001000000000000000100000000000000010000000000000001000000000000001000000000000000100000000000000010000000000000010000000000000001000000000000000100000000000000100000000000000010000000000000001000000000000000000000000000000000, Y=$procmux$156_Y [16:0]
      New connections: $procmux$156_Y [17] = 1'0
    Consolidated identical input bits for $pmux cell $procmux$175:
      Old ports: A=14'00000000000000, B=56'00000000000001000000001000001000000000000000001000000000, Y=$auto$wreduce.cc:454:run$822 [13:0]
      New ports: A=4'0000, B=16'0001001010000100, Y={ $auto$wreduce.cc:454:run$822 [13] $auto$wreduce.cc:454:run$822 [9] $auto$wreduce.cc:454:run$822 [5] $auto$wreduce.cc:454:run$822 [0] }
      New connections: { $auto$wreduce.cc:454:run$822 [12:10] $auto$wreduce.cc:454:run$822 [8:6] $auto$wreduce.cc:454:run$822 [4:1] } = 10'0000000000
  Optimizing cells in module \i2c_master_bit_ctrl.
    Consolidated identical input bits for $mux cell $procmux$184:
      Old ports: A=$procmux$156_Y, B=18'000000000000000000, Y=$0\c_state[17:0]
      New ports: A=$procmux$156_Y [16:0], B=17'00000000000000000, Y=$0\c_state[17:0] [16:0]
      New connections: $0\c_state[17:0] [17] = 1'0
  Optimizing cells in module \i2c_master_bit_ctrl.
  Optimizing cells in module \i2c_master_byte_ctrl.
    Consolidated identical input bits for $mux cell $procmux$403:
      Old ports: A=2'00, B=2'10, Y=$auto$wreduce.cc:454:run$824 [1:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:454:run$824 [1]
      New connections: $auto$wreduce.cc:454:run$824 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$409:
      Old ports: A=4'0100, B=4'1000, Y=$procmux$409_Y
      New ports: A=2'01, B=2'10, Y=$procmux$409_Y [3:2]
      New connections: $procmux$409_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell $procmux$415:
      Old ports: A=4'1000, B=4'0100, Y=$procmux$415_Y
      New ports: A=2'10, B=2'01, Y=$procmux$415_Y [3:2]
      New connections: $procmux$415_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell $procmux$421:
      Old ports: A=4'0100, B=4'1000, Y=$procmux$421_Y
      New ports: A=2'01, B=2'10, Y=$procmux$421_Y [3:2]
      New connections: $procmux$421_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell $procmux$427:
      Old ports: A=3'010, B=3'100, Y=$auto$wreduce.cc:454:run$825 [2:0]
      New ports: A=2'01, B=2'10, Y=$auto$wreduce.cc:454:run$825 [2:1]
      New connections: $auto$wreduce.cc:454:run$825 [0] = 1'0
  Optimizing cells in module \i2c_master_byte_ctrl.
    Consolidated identical input bits for $mux cell $procmux$430:
      Old ports: A={ 1'0 $auto$wreduce.cc:454:run$825 [2:0] }, B=4'1000, Y=$procmux$430_Y
      New ports: A={ 1'0 $auto$wreduce.cc:454:run$825 [2:1] }, B=3'100, Y=$procmux$430_Y [3:1]
      New connections: $procmux$430_Y [0] = 1'0
  Optimizing cells in module \i2c_master_byte_ctrl.
  Optimizing cells in module \i2c_master_top.
Performed a total of 9 changes.

5.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

5.19.6. Executing OPT_SHARE pass.

5.19.7. Executing OPT_DFF pass (perform DFF optimizations).

5.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Finding unused cells or wires in module \i2c_master_top..

5.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.
<suppressed ~1 debug messages>
Optimizing module i2c_master_top.

5.19.10. Rerunning OPT passes. (Maybe there is more to do..)

5.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_bit_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_byte_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

5.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_bit_ctrl.
  Optimizing cells in module \i2c_master_byte_ctrl.
  Optimizing cells in module \i2c_master_top.
Performed a total of 0 changes.

5.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

5.19.14. Executing OPT_SHARE pass.

5.19.15. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 17 on $auto$opt_dff.cc:764:run$732 ($adffe) from module i2c_master_bit_ctrl.

5.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Finding unused cells or wires in module \i2c_master_top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

5.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_bit_ctrl.
<suppressed ~2 debug messages>
Optimizing module i2c_master_byte_ctrl.
Optimizing module i2c_master_top.

5.19.18. Rerunning OPT passes. (Maybe there is more to do..)

5.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_bit_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_byte_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

5.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_bit_ctrl.
  Optimizing cells in module \i2c_master_byte_ctrl.
  Optimizing cells in module \i2c_master_top.
Performed a total of 0 changes.

5.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

5.19.22. Executing OPT_SHARE pass.

5.19.23. Executing OPT_DFF pass (perform DFF optimizations).

5.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Finding unused cells or wires in module \i2c_master_top..

5.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.
Optimizing module i2c_master_top.

5.19.26. Finished OPT passes. (There is nothing left to do.)

5.20. Executing TECHMAP pass (map to technology primitives).

5.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=7 for cells of type $pmux.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=1\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=5 for cells of type $pmux.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=3 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=1\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=4 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=17\S_WIDTH=14 for cells of type $pmux.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=1\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $dffe.
Using template $paramod\_90_lcu\WIDTH=14 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=16 for cells of type $lcu.
No more expansions possible.
<suppressed ~1027 debug messages>

5.21. Executing OPT pass (performing simple optimizations).

5.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_bit_ctrl.
<suppressed ~932 debug messages>
Optimizing module i2c_master_byte_ctrl.
<suppressed ~102 debug messages>
Optimizing module i2c_master_top.
<suppressed ~58 debug messages>

5.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_bit_ctrl'.
<suppressed ~669 debug messages>
Finding identical cells in module `\i2c_master_byte_ctrl'.
<suppressed ~57 debug messages>
Finding identical cells in module `\i2c_master_top'.
<suppressed ~69 debug messages>
Removed a total of 265 cells.

5.21.3. Executing OPT_DFF pass (perform DFF optimizations).

5.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Finding unused cells or wires in module \i2c_master_top..
Removed 18 unused cells and 621 unused wires.
<suppressed ~21 debug messages>

5.21.5. Finished fast OPT passes.

5.22. Executing ABC pass (technology mapping using ABC).

5.22.1. Extracting gate netlist of module `\i2c_master_bit_ctrl' to `<abc-temp-dir>/input.blif'..
Extracted 538 gates and 637 wires to a netlist network with 97 inputs and 79 outputs.

5.22.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.22.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       30
ABC RESULTS:            ANDNOT cells:      104
ABC RESULTS:               MUX cells:       32
ABC RESULTS:              NAND cells:        6
ABC RESULTS:               NOR cells:       35
ABC RESULTS:               NOT cells:        7
ABC RESULTS:                OR cells:      118
ABC RESULTS:             ORNOT cells:       54
ABC RESULTS:              XNOR cells:        9
ABC RESULTS:               XOR cells:       19
ABC RESULTS:        internal signals:      461
ABC RESULTS:           input signals:       97
ABC RESULTS:          output signals:       79
Removing temp directory.

5.22.2. Extracting gate netlist of module `\i2c_master_byte_ctrl' to `<abc-temp-dir>/input.blif'..
Extracted 203 gates and 242 wires to a netlist network with 37 inputs and 29 outputs.

5.22.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.22.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        4
ABC RESULTS:            ANDNOT cells:       62
ABC RESULTS:               MUX cells:       15
ABC RESULTS:              NAND cells:       16
ABC RESULTS:               NOR cells:       11
ABC RESULTS:               NOT cells:        7
ABC RESULTS:                OR cells:       41
ABC RESULTS:             ORNOT cells:       13
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        1
ABC RESULTS:        internal signals:      176
ABC RESULTS:           input signals:       37
ABC RESULTS:          output signals:       29
Removing temp directory.

5.22.3. Extracting gate netlist of module `\i2c_master_top' to `<abc-temp-dir>/input.blif'..
Extracted 183 gates and 257 wires to a netlist network with 72 inputs and 44 outputs.

5.22.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.22.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        5
ABC RESULTS:            ANDNOT cells:       81
ABC RESULTS:               MUX cells:        8
ABC RESULTS:              NAND cells:       12
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               NOT cells:        3
ABC RESULTS:                OR cells:       54
ABC RESULTS:             ORNOT cells:        5
ABC RESULTS:        internal signals:      141
ABC RESULTS:           input signals:       72
ABC RESULTS:          output signals:       44
Removing temp directory.

5.23. Executing OPT pass (performing simple optimizations).

5.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.
Optimizing module i2c_master_top.

5.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_bit_ctrl'.
<suppressed ~39 debug messages>
Finding identical cells in module `\i2c_master_byte_ctrl'.
Finding identical cells in module `\i2c_master_top'.
Removed a total of 13 cells.

5.23.3. Executing OPT_DFF pass (perform DFF optimizations).

5.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Finding unused cells or wires in module \i2c_master_top..
Removed 0 unused cells and 843 unused wires.
<suppressed ~6 debug messages>

5.23.5. Finished fast OPT passes.

5.24. Executing HIERARCHY pass (managing design hierarchy).

5.24.1. Analyzing design hierarchy..
Top module:  \i2c_master_top
Used module:     \i2c_master_byte_ctrl
Used module:         \i2c_master_bit_ctrl

5.24.2. Analyzing design hierarchy..
Top module:  \i2c_master_top
Used module:     \i2c_master_byte_ctrl
Used module:         \i2c_master_bit_ctrl
Removed 0 unused modules.

5.25. Printing statistics.

=== i2c_master_bit_ctrl ===

   Number of wires:                386
   Number of wire bits:            506
   Number of public wires:          35
   Number of public wire bits:     104
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                475
     $_ANDNOT_                     104
     $_AND_                         30
     $_DFFE_PN0P_                   35
     $_DFFE_PN1P_                    8
     $_DFFE_PP_                      1
     $_DFF_PN0_                     24
     $_DFF_PN1_                      5
     $_DFF_P_                        1
     $_MUX_                         32
     $_NAND_                         6
     $_NOR_                         22
     $_NOT_                          7
     $_ORNOT_                       54
     $_OR_                         118
     $_XNOR_                         9
     $_XOR_                         19

=== i2c_master_byte_ctrl ===

   Number of wires:                190
   Number of wire bits:            248
   Number of public wires:          31
   Number of public wire bits:      77
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                198
     $_ANDNOT_                      62
     $_AND_                          4
     $_DFFE_PN0P_                   16
     $_DFF_PN0_                      9
     $_DFF_PN1_                      1
     $_MUX_                         15
     $_NAND_                        16
     $_NOR_                         11
     $_NOT_                          7
     $_ORNOT_                       13
     $_OR_                          41
     $_XNOR_                         1
     $_XOR_                          1
     i2c_master_bit_ctrl             1

=== i2c_master_top ===

   Number of wires:                183
   Number of wire bits:            285
   Number of public wires:          40
   Number of public wire bits:     106
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                225
     $_ANDNOT_                      81
     $_AND_                          5
     $_DFFE_PN0P_                   24
     $_DFFE_PN1P_                   16
     $_DFF_PN0_                      5
     $_DFF_P_                        9
     $_MUX_                          8
     $_NAND_                        12
     $_NOR_                          2
     $_NOT_                          3
     $_ORNOT_                        5
     $_OR_                          54
     i2c_master_byte_ctrl            1

=== design hierarchy ===

   i2c_master_top                    1
     i2c_master_byte_ctrl            1
       i2c_master_bit_ctrl           1

   Number of wires:                759
   Number of wire bits:           1039
   Number of public wires:         106
   Number of public wire bits:     287
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                896
     $_ANDNOT_                     247
     $_AND_                         39
     $_DFFE_PN0P_                   75
     $_DFFE_PN1P_                   24
     $_DFFE_PP_                      1
     $_DFF_PN0_                     38
     $_DFF_PN1_                      6
     $_DFF_P_                       10
     $_MUX_                         55
     $_NAND_                        34
     $_NOR_                         35
     $_NOT_                         17
     $_ORNOT_                       72
     $_OR_                         213
     $_XNOR_                        10
     $_XOR_                         20

5.26. Executing CHECK pass (checking for obvious problems).
Checking module i2c_master_bit_ctrl...
Checking module i2c_master_byte_ctrl...
Checking module i2c_master_top...
Found and reported 0 problems.

6. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    \DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

6.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\i2c_master_bit_ctrl':
  mapped 72 $_DFFSR_PNN_ cells to \DFFSR cells.
  mapped 2 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\i2c_master_byte_ctrl':
  mapped 26 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\i2c_master_top':
  mapped 45 $_DFFSR_PNN_ cells to \DFFSR cells.
  mapped 9 $_DFF_P_ cells to \DFFPOSX1 cells.

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_bit_ctrl.
<suppressed ~72 debug messages>
Optimizing module i2c_master_byte_ctrl.
<suppressed ~26 debug messages>
Optimizing module i2c_master_top.
<suppressed ~45 debug messages>

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_bit_ctrl..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \i2c_master_byte_ctrl..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_bit_ctrl.
  Optimizing cells in module \i2c_master_byte_ctrl.
  Optimizing cells in module \i2c_master_top.
Performed a total of 0 changes.

7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

7.6. Executing OPT_DFF pass (perform DFF optimizations).

7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Finding unused cells or wires in module \i2c_master_top..
Removed 0 unused cells and 143 unused wires.
<suppressed ~3 debug messages>

7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.
Optimizing module i2c_master_top.

7.9. Rerunning OPT passes. (Maybe there is more to do..)

7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_bit_ctrl..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \i2c_master_byte_ctrl..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_bit_ctrl.
  Optimizing cells in module \i2c_master_byte_ctrl.
  Optimizing cells in module \i2c_master_top.
Performed a total of 0 changes.

7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

7.13. Executing OPT_DFF pass (perform DFF optimizations).

7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Finding unused cells or wires in module \i2c_master_top..

7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.
Optimizing module i2c_master_top.

7.16. Finished OPT passes. (There is nothing left to do.)

8. Executing ABC pass (technology mapping using ABC).

8.1. Extracting gate netlist of module `\i2c_master_bit_ctrl' to `<abc-temp-dir>/input.blif'..
Extracted 445 gates and 543 wires to a netlist network with 98 inputs and 73 outputs.

8.1.1. Executing ABC.
Running ABC command: yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/oleg/RTLtoGDS/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/home/oleg/RTLtoGDS/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:       23
ABC RESULTS:           AOI21X1 cells:       22
ABC RESULTS:           AOI22X1 cells:       12
ABC RESULTS:             INVX1 cells:       77
ABC RESULTS:           NAND2X1 cells:       80
ABC RESULTS:           NAND3X1 cells:       43
ABC RESULTS:            NOR2X1 cells:       68
ABC RESULTS:            NOR3X1 cells:        5
ABC RESULTS:           OAI21X1 cells:       87
ABC RESULTS:           OAI22X1 cells:        9
ABC RESULTS:             OR2X2 cells:        7
ABC RESULTS:        internal signals:      372
ABC RESULTS:           input signals:       98
ABC RESULTS:          output signals:       73
Removing temp directory.

8.2. Extracting gate netlist of module `\i2c_master_byte_ctrl' to `<abc-temp-dir>/input.blif'..
Extracted 187 gates and 229 wires to a netlist network with 42 inputs and 26 outputs.

8.2.1. Executing ABC.
Running ABC command: yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/oleg/RTLtoGDS/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/home/oleg/RTLtoGDS/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.2.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        2
ABC RESULTS:           AOI21X1 cells:       11
ABC RESULTS:           AOI22X1 cells:        3
ABC RESULTS:             INVX1 cells:       26
ABC RESULTS:            MUX2X1 cells:        8
ABC RESULTS:           NAND2X1 cells:       29
ABC RESULTS:           NAND3X1 cells:       15
ABC RESULTS:            NOR2X1 cells:       14
ABC RESULTS:            NOR3X1 cells:        5
ABC RESULTS:           OAI21X1 cells:       38
ABC RESULTS:           OAI22X1 cells:        3
ABC RESULTS:        internal signals:      161
ABC RESULTS:           input signals:       42
ABC RESULTS:          output signals:       26
Removing temp directory.

8.3. Extracting gate netlist of module `\i2c_master_top' to `<abc-temp-dir>/input.blif'..
Extracted 210 gates and 282 wires to a netlist network with 72 inputs and 54 outputs.

8.3.1. Executing ABC.
Running ABC command: yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/oleg/RTLtoGDS/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.01 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/home/oleg/RTLtoGDS/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.02 sec
ABC: Memory =    0.38 MB. Time =     0.02 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.3.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        2
ABC RESULTS:           AOI21X1 cells:       12
ABC RESULTS:           AOI22X1 cells:        7
ABC RESULTS:             INVX1 cells:       58
ABC RESULTS:            MUX2X1 cells:       10
ABC RESULTS:           NAND2X1 cells:       22
ABC RESULTS:           NAND3X1 cells:       20
ABC RESULTS:            NOR2X1 cells:       21
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           OAI21X1 cells:       53
ABC RESULTS:           OAI22X1 cells:       14
ABC RESULTS:        internal signals:      156
ABC RESULTS:           input signals:       72
ABC RESULTS:          output signals:       54
Removing temp directory.

9. Executing FLATTEN pass (flatten design).
Deleting now unused module i2c_master_bit_ctrl.
Deleting now unused module i2c_master_byte_ctrl.
<suppressed ~2 debug messages>

10. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 1029 unused wires.

11. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port i2c_master_top.arst_i: Missing option -inpad.
Don't map input port i2c_master_top.scl_pad_i: Missing option -inpad.
Mapping port i2c_master_top.scl_pad_o using BUFX2.
Mapping port i2c_master_top.scl_padoen_o using BUFX2.
Don't map input port i2c_master_top.sda_pad_i: Missing option -inpad.
Mapping port i2c_master_top.sda_pad_o using BUFX2.
Mapping port i2c_master_top.sda_padoen_o using BUFX2.
Mapping port i2c_master_top.wb_ack_o using BUFX2.
Don't map input port i2c_master_top.wb_adr_i: Missing option -inpad.
Don't map input port i2c_master_top.wb_clk_i: Missing option -inpad.
Don't map input port i2c_master_top.wb_cyc_i: Missing option -inpad.
Don't map input port i2c_master_top.wb_dat_i: Missing option -inpad.
Mapping port i2c_master_top.wb_dat_o using BUFX2.
Mapping port i2c_master_top.wb_inta_o using BUFX2.
Don't map input port i2c_master_top.wb_rst_i: Missing option -inpad.
Don't map input port i2c_master_top.wb_stb_i: Missing option -inpad.
Don't map input port i2c_master_top.wb_we_i: Missing option -inpad.

12. Executing OPT pass (performing simple optimizations).

12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_top.
Performed a total of 0 changes.

12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

12.6. Executing OPT_DFF pass (perform DFF optimizations).

12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

12.9. Rerunning OPT passes. (Maybe there is more to do..)

12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_top.
Performed a total of 0 changes.

12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

12.13. Executing OPT_DFF pass (perform DFF optimizations).

12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..

12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

12.16. Finished OPT passes. (There is nothing left to do.)

13. Executing Verilog backend.
Dumping module `\i2c_master_top'.

14. Printing statistics.

=== i2c_master_top ===

   Number of wires:                854
   Number of wire bits:           1003
   Number of public wires:         854
   Number of public wire bits:    1003
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                975
     AND2X2                         27
     AOI21X1                        45
     AOI22X1                        22
     BUFX2                          14
     DFFPOSX1                       11
     DFFSR                         143
     INVX1                         161
     MUX2X1                         18
     NAND2X1                       131
     NAND3X1                        78
     NOR2X1                        103
     NOR3X1                         11
     OAI21X1                       178
     OAI22X1                        26
     OR2X2                           7

Warnings: 3 unique messages, 3 total
End of script. Logfile hash: c268948f21, CPU: user 3.64s system 0.07s, MEM: 21.72 MB peak
Yosys 0.9+3760 (git sha1 40e35993, gcc 9.3.0-17ubuntu1~20.04 -fPIC -Os)
Time spent: 24% 2x abc (1 sec), 17% 2x write_verilog (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /home/oleg/RTLtoGDS/tech/osu035/osu035_stdcells.lef
Running vlogFanout
vlogFanout -l 200 -c 30 -I i2c_master_top_nofanout -s nullstring -p /home/oleg/RTLtoGDS/tech/osu035/osu035_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y i2c_master_top_mapped.v i2c_master_top_sized.v

vlogFanout for qflow 1.4.89
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 16 (load 497.57) from node _183_,
driven by OAI21X1 with strength 101.851 (fF driven at latency 200)
Top fanout load-to-strength ratio is 4.83489 (latency = 966.978 ps)
Top input node fanout is 154 (load 5013.05) from node wb_clk_i.
0 gates exceed specified minimum load.
29 buffers were added.
Warning 1: load of 154.395 is 1.50025 times greater than strongest gate DFFSR
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 167.541 is 1.628 times greater than strongest gate DFFSR
Warning 4: load of 172.401 is 1.67522 times greater than strongest gate DFFSR
Warning 5: load of 181.253 is 1.76123 times greater than strongest gate DFFSR
Warning 7: load of 181.455 is 1.7632 times greater than strongest gate DFFSR
Warning 12: load of 216.556 is 2.10428 times greater than strongest gate DFFSR
Warning 24: load of 222.337 is 2.16045 times greater than strongest gate DFFSR
Warning 25: load of 274.393 is 2.66628 times greater than strongest gate DFFSR
Warning 57: load of 279.933 is 2.72011 times greater than strongest gate DFFSR
Warning 58: load of 305.347 is 2.96706 times greater than strongest gate DFFSR
Warning 59: load of 325.62 is 3.16405 times greater than strongest gate DFFSR
Warning 64: load of 507.57 is 4.93206 times greater than strongest gate DFFSR
22 gates were changed.

Gate counts by drive strength:

	"" gates	In: 143    	Out: 143    	+0
	"1" gates	In: 796    	Out: 774    	-22
	"2" gates	In: 65    	Out: 79    	+14

190 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"" gates	In: 143    	Out: 143    	+0
	"1" gates	In: 796    	Out: 774    	-22
	"2" gates	In: 65    	Out: 79    	+14

Number of gates changed: 0
Running vlog2Verilog for antenna cell mapping.
vlog2Verilog -c -p -v vdd -g gnd  -l /home/oleg/RTLtoGDS/tech/osu035/osu035_stdcells.lef 
   -o i2c_master_top.v i2c_master_top_sized.v

Generating RTL verilog and SPICE netlist file in directory
	 /home/oleg/RTLtoGDS/projects/i2c/synthesis
Files:
   Verilog: /home/oleg/RTLtoGDS/projects/i2c/synthesis/i2c_master_top.rtl.v
   Verilog: /home/oleg/RTLtoGDS/projects/i2c/synthesis/i2c_master_top.rtlnopwr.v
   Verilog: /home/oleg/RTLtoGDS/projects/i2c/synthesis/i2c_master_top.rtlbb.v
   Spice:   /home/oleg/RTLtoGDS/projects/i2c/synthesis/i2c_master_top.spc

Running vlog2Verilog.
vlog2Verilog -c -v vdd -g gnd  -l /home/oleg/RTLtoGDS/tech/osu035/osu035_stdcells.lef 
	-o i2c_master_top.rtl.v
   i2c_master_top.v
vlog2Verilog -c -p -v vdd -g gnd  -l /home/oleg/RTLtoGDS/tech/osu035/osu035_stdcells.lef 
	-o i2c_master_top.rtlnopwr.v
   i2c_master_top.v
/home/oleg/RTLtoGDS/bin/vlog2Verilog -c -p -b -n -v vdd -g gnd  -l /home/oleg/RTLtoGDS/tech/osu035/osu035_stdcells.lef
   -o i2c_master_top.rtlbb.v
Running vlog2Spice.
vlog2Spice -i -l  /home/oleg/RTLtoGDS/tech/osu035/osu035_stdcells.sp -o i2c_master_top.spc i2c_master_top.rtl.v
Running spi2xspice.py
spi2xspice.py "/home/oleg/RTLtoGDS/tech/osu035/osu035_stdcells.lib" i2c_master_top.spc i2c_master_top.xspice

Synthesis script ended on Сб 10 апр 2021 00:14:56 MSK
